buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}

plugins {
    id 'org.springframework.boot' version '2.5.5'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'com.ewerk.gradle.plugins.querydsl' version '1.0.10'
    id 'java'
    id 'jacoco'
    //id 'org.siouan.frontend-jdk11' version '5.3.0'
    //id 'com.github.node-gradle.node' version "3.1.1"
}

group = 'com.trip'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-devtools'
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.5.7'

    implementation 'com.querydsl:querydsl-jpa'



    implementation 'org.springframework.boot:spring-boot-starter-validation:2.5.5'
    implementation 'org.springframework.boot:spring-boot-starter-security:2.5.6'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.2'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.2'
    implementation 'org.springframework.security:spring-security-test:5.5.1'

    implementation 'javax.annotation:javax.annotation-api:1.3.2'

    implementation 'org.mapstruct:mapstruct:1.4.2.Final'
    implementation 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

    implementation 'org.springframework.boot:spring-boot-starter-data-redis'



    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor:2.6.3'

    testImplementation('org.springframework.boot:spring-boot-starter-test:2.6.3') {
        exclude module: 'junit'
    }

    //--------여기서부터 JUnit5 설정 시작----------------------------------------
    test {
        useJUnitPlatform()
    }

    //아래 설정으로 JUnit5 기반으로 작성한 테스트 코드 실행 가능
    testImplementation "org.junit.jupiter:junit-jupiter:5.7.2"
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.2'


    //JUnit4 기반 테스트 코드도 실행시키고 싶다면 아래와 같이
    //JUnit Vintage와 JUnit 4.12이상의 라이브러리를 추가하면 된다.
    testCompileOnly 'junit:junit:4.13.2'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.3.1'


    runtimeOnly 'com.h2database:h2'

}

//querydsl 시작

def querydslDir = "$buildDir/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}
sourceSets {
    main.java.srcDir querydslDir
}

configurations {

    querydsl.extendsFrom compileClasspath
}

compileQuerydsl {
    delete querydslDir
    options.annotationProcessorPath = configurations.querydsl
}

//querydsl 끝





//--------여기서부터 Jacoco 설정 시작----------------------------------------

jacoco {
    toolVersion = '0.8.5'
}

jacocoTestReport {
    reports {
        html.enabled true;
        xml.enabled false;
        csv.enabled false;
    }
}

jacocoTestCoverageVerification {    //JACOCO 설정은 여기만 조정하면 OK
    violationRules {
        rule {
            element = 'CLASS'

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.50
            }
        }
    }
}

task testCoverage(type: Test) {
    group 'verification'
    description 'Runs the unit tests with coverage'

    dependsOn(':test',
              ':jacocoTestReport',
              ':jacocoTestCoverageVerification')
    tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
    tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
}



